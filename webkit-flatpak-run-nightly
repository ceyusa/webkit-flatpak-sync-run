#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2020 Igalia S.L.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
# Boston, MA 02110-1301, USA.

import argparse
import os
import re
import sys
import shlex
import tempfile
import time
import subprocess

SDK_BRANCH = "21.08"
USER_DIR = os.path.expanduser("~/.cache/wk-sdk")
BUILDBOX = 'noite.home.arpa'
WKSRCDIR = '/home/vjaquez/WebKit'
GSTPATH = '/home/vjaquez/gst/gstreamer'

def flatpak(*args, env=None, stdout=None):
    cmd_env = os.environ.copy()
    if env:
        cmd_env.update(env)
    cmd_env["FLATPAK_USER_DIR"] = USER_DIR
    return subprocess.call(("flatpak",) + args, env=cmd_env, stdout=stdout)

def ensure_sdk(build_type):
    branch = SDK_BRANCH
    if not os.path.isdir(USER_DIR):
        flatpak("remote-add", "--user", "webkit-sdk", "https://software.igalia.com/flatpak-refs/webkit-sdk.flatpakrepo")
        flatpak("remote-add", "--user", "flathub", "https://dl.flathub.org/repo/flathub.flatpakrepo")
        flatpak("install", "--user", "-y", "webkit-sdk", f"org.webkit.Platform//{branch}")
        flatpak("install", "--user", "-y", "webkit-sdk", f"org.webkit.Sdk//{branch}")
        #flatpak("install", "--user", "-y", "webkit-sdk", f"org.webkit.Sdk.Debug//{branch}")
        flatpak("install", "--user", "-y", "flathub", f"org.freedesktop.Sdk.Extension.llvm12/{branch}")
        flatpak("install", "--user", "-y", "flathub", f"org.freedesktop.Platform.GL.default/{branch}")
        flatpak("install", "--user", "-y", "flathub", f"org.freedesktop.Platform.VAAPI.Intel/x86_64/{branch}")
    else:
        flatpak("update", "--user", "-y")

def get_build_path():
    return os.path.join(os.curdir, 'WebKitBuild')

def get_build_dir(args, top_level=False):
    configuration = args.build_type.lower()
    if args.platform == 'wpewebkit':
        platform = 'wpe'
    else:
        platform = 'gtk'

    command = ['ssh', BUILDBOX, os.path.join(WKSRCDIR, 'Tools', 'Scripts', 'webkit-build-directory'), '--' + platform, '--' + configuration]
    if top_level:
        command += ['--top-level']
    else:
        command += ['--configuration']

    return subprocess.Popen(command, stdout=subprocess.PIPE).communicate()[0].strip().decode('utf-8')

def ensure_extracted_build(args):
    includes = [ 'bin', 'lib', 'install/include', 'install/lib/pkgconfig', 'Tools', 'Source']
    src = "{}:{}/{{{}}}".format(BUILDBOX, get_build_dir(args), ','.join(includes))
    command = [ 'rsync', '-adivC', src ]
    command += [ '--exclude', '*.o', '--exclude', '*.a' ]
    path = get_build_path()
    command += [ path ]
    cmd = ' '.join(command)
    os.system(cmd)
    return path

def run(path, build_type, args):
    env = {
        "FLATPAK_BWRAP": os.path.realpath(__file__),
        "WEBKIT_BUILD_DIR_BIND_MOUNT": f"/app/webkit/WebKitBuild/{build_type}:{path}",
    }

    if not args:
        args.append("bash")

    if args[0] == "bash":
        args.extend(['--noprofile', '--norc', '-i'])

    flatpak("run", "--die-with-parent", "--user",
            f"--env=PATH=/app/webkit/WebKitBuild/{build_type}/bin:/usr/bin",
            "--env=PS1=[üì¶üåêüê± $FLATPAK_ID \\W]\\$",
            "--filesystem=host",
            "--allow=devel",
            "--device=dri",
            "--share=ipc",
            "--share=network",
            "--socket=pulseaudio",
            "--socket=system-bus",
            "--socket=wayland",
            "--socket=x11",
            "--system-talk-name=org.a11y.Bus",
            "--system-talk-name=org.freedesktop.GeoClue2",
            "--talk-name=org.a11y.Bus",
            "--talk-name=org.freedesktop.Flatpak",
            "--talk-name=org.gtk.vfs",
            "--talk-name=org.gtk.vfs.*",
            f"--command={args[0]}", "org.webkit.Sdk", *args[1:], env=env)

def setup_gst(path, build_type):
    gst_builddir = os.path.join(path, 'gst-build')
    if not os.path.exists(os.path.join(gst_builddir, 'build.ninja')):
        args = ['meson', GSTPATH, gst_builddir]
        run(path, build_type, args)

    args = ['ninja', '-C', gst_builddir]
    run(path, build_type, args)

    command = [os.path.join(GSTPATH, 'gst-env.py'), '--builddir', gst_builddir, '--srcdir', GSTPATH, '--only-environment']
    gstenv = subprocess.check_output(command).strip().decode('utf-8')
    env = {}
    for line in [line for line in gstenv.splitlines() if not line.startswith("export")]:
        tokens = line.split('=')
        name, value = tokens[0], '='.join(tokens[1:])
        if not name.startswith("GST_") and name not in ("LD_LIBRARY_PATH", "PATH", "PKG_CONFIG_PATH"):
            continue
        if name not in ("GST_DEBUG", "GST_VERSION", "GST_ENV"):
            new_value = ':'.join(p.replace(os.path.abspath(path), f"/app/webkit/WebKitBuild/{build_type}") for p in value.split(':'))
        else:
            new_value = value.replace("'", "")
        env[name] = new_value
    return env

def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("--revision-number", type=int, help="Download a specific revision (default: latest)",
                        action='store', dest='revision_number')
    parser.add_argument("-p", action="store", dest="path", help="Reuse previously downloaded build from given path")
    type_group = parser.add_mutually_exclusive_group()
    type_group.add_argument("--debug", help="Download a debug build, also installs Sdk debug symbols.",
                            dest='build_type', action="store_const", const="Debug")
    type_group.add_argument("--release", help="Download a release build.",
                            dest='build_type', action="store_const", const="Release")
    platform_group = parser.add_mutually_exclusive_group()
    platform_group.add_argument('--gtk', action='store_const', dest='platform', const='webkitgtk',
                                help='Download and run GTK port build artefacts')
    platform_group.add_argument('--wpe', action='store_const', dest='platform', const='wpewebkit',
                                help=('Download and run WPE port build artefacts'))
    parser.add_argument("command", nargs=argparse.REMAINDER, help="Command to execute (example: MiniBrowser, jsc)")
    if len(args) == 0:
        parser.print_help(sys.stderr)
        sys.exit(1)
    parsed, _ = parser.parse_known_args(args=args)
    if not parsed.platform:
        parsed.platform = "webkitgtk"
    if not parsed.build_type:
        parsed.build_type = "Release"

    ensure_sdk(parsed.build_type)
    if not parsed.path:
        parsed.path = ensure_extracted_build(parsed)

    if parsed.path:
        gstenv = setup_gst(parsed.path, parsed.build_type)
        run(parsed.path, parsed.build_type, parsed.command)

def read_lines(fd: int):
    new_fd = os.dup(fd)
    pos = os.lseek(fd, 0, os.SEEK_CUR)
    try:
        with os.fdopen(new_fd, 'r') as handle:
            data = handle.read()
            lines = data.split('\x00')
            for line in lines:
                yield line
    except Exception as e:
        print("Error reading bwrap arguments", file=sys.stderr)
        print(e, file=sys.stderr)
    finally:
        os.lseek(fd, pos, os.SEEK_SET)

def bwrap_main(args):
    bind_mounts = {
        "/run/shm": "/dev/shm",
    }

    args_idx = args.index('--args')
    arg_fd = int(args[args_idx + 1])
    lines = read_lines(arg_fd)

    environ = os.environ.copy()
    while True:
        try:
            arg = next(lines)
            if arg == '--setenv':
                key = next(lines)
                value = next(lines)
                environ[key] = value
        except StopIteration:
            break

    build_path = environ.get("WEBKIT_BUILD_DIR_BIND_MOUNT")
    if build_path:
        dest, src = build_path.split(":")
        bind_mounts[dest] = src

    bwrap_args = ["bwrap", ]
    for dst, src in bind_mounts.items():
        bwrap_args.extend(["--bind", src, dst])

    os.execvpe(bwrap_args[0], bwrap_args + args, os.environ)

if __name__ == "__main__":
    ld_library_path = os.environ.get("LD_LIBRARY_PATH", "")
    if '--args' in sys.argv:
        bwrap_main(sys.argv[1:])
    else:
        main(sys.argv[1:])
